{"version":3,"sources":["webpack://extension-kitchensink/./src/components/Embed/EmbedDashboard.tsx","webpack://extension-kitchensink/./src/components/Embed/components/EmbedContainer/EmbedContainer.tsx","webpack://extension-kitchensink/./src/components/SandboxStatus/SandboxStatus.tsx"],"names":["id","dashboardNext","setDashboardNext","React","running","setRunning","dashboard","setDashboard","extensionContext","useContext","ExtensionContext2","canceller","event","cancel","modal","updateRunButton","setupDashboard","embedCtrRef","useCallback","el","hostUrl","extensionSDK","lookerHostData","innerHTML","LookerEmbedSDK","db","withNext","appendTo","on","bind","build","connect","then","catch","error","console","Heading","mt","Label","htmlFor","ToggleSwitch","ml","onChange","m","onClick","run","disabled","ref","EmbedContainer","styled","SandboxStatus","sandboxStatus","setSandboxStatus","useState","useEffect","window","parent","looker","version","err","Paragraph","my"],"mappings":"0PAoHA,QAhF8C,IAAW,IAAX,GAAEA,GAAS,GAChDC,EAAeC,GAAoBC,YAAe,IAClDC,EAASC,GAAcF,YAAe,IACtCG,EAAWC,GAAgBJ,aAC5BK,GAAmBC,gBACvBC,qBAOIC,EAAaC,IACV,CAAEC,QAASD,EAAME,QAGpBC,EAAmBX,IACvBC,EAAWD,IAGPY,EAAkBV,IACtBC,EAAaD,IAGTW,GAAcC,kBACjBC,IAAO,QACAC,EAAUZ,SAAH,UAAGA,EAAkBa,oBAArB,iBAAG,EAAgCC,sBAAnC,aAAG,EAAgDF,QAChE,GAAID,GAAMC,EAAS,CACjBD,EAAGI,UAAY,GACfC,sBAAoBJ,GACpB,IAAMK,EAAKD,uCAAqCxB,GAC5CC,GACFwB,EAAGC,WAELD,EAAGE,SAASR,GACTS,GAAG,mBAAoBb,EAAgBc,KAAK,MAAM,IAClDD,GAAG,sBAAuBb,EAAgBc,KAAK,MAAM,IACrDD,GAAG,yBAA0Bb,EAAgBc,KAAK,MAAM,IACxDD,GAAG,kBAAmBjB,GACtBiB,GAAG,qBAAsBjB,GACzBiB,GAAG,yBAA0BjB,GAC7BiB,GAAG,sBAAuBjB,GAC1BmB,QACAC,UACAC,KAAKhB,GACLiB,OAAOC,IACNC,QAAQD,MAAM,mBAAoBA,SAI1C,CAACjC,IASH,OACE,gCACE,gBAAC,EAAAmC,QAAD,CAASC,GAAG,UAAZ,sBACA,gBAAC,IAAD,MACA,gBAAC,EAAAC,MAAD,CAAOC,QAAQ,UAAf,iBAEE,gBAAC,EAAAC,aAAD,CACEC,GAAG,QACHC,SA3DgB,KACtBxC,GAAkBD,IA2DZ2B,GAAI3B,EACJD,GAAG,YAGP,gBAAC,IAAD,CAAQ2C,EAAE,SAASC,QAnBF,KACftC,GACFA,EAAUuC,OAiBgCC,SAAU1C,GAApD,iBAGA,gBAAC,IAAD,CAAgB2C,IAAK9B,O,kDCrFd+B,E,SAAiBC,kBAAH,0DAAGA,CAAH,iE,wECEdC,EAA8C,KACzD,IAAOC,EAAeC,IAAoBC,cAAS,IAgBnD,OAdAC,gBAAU,KACR,IAAI,MAMF,UAL2BC,OAAeC,OAK7BC,cAAb,SAAqBC,QACrBN,EAAiB,OACjB,MAAOO,GACPP,EAAiB,OAElB,IAGD,gBAAC,EAAAQ,UAAD,CAAWC,GAAG,UAAd,qBACoB,yBAAIV,GADxB","file":"embed_dashboard.bundle.js","sourcesContent":["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useCallback, useContext } from 'react'\nimport { Button, Heading, Label, ToggleSwitch } from '@looker/components'\nimport { LookerEmbedSDK, LookerEmbedDashboard } from '@looker/embed-sdk'\nimport { Looker40SDK } from '@looker/sdk'\nimport {\n  ExtensionContext2,\n  ExtensionContextData2,\n} from '@looker/extension-sdk-react'\nimport { SandboxStatus } from '../SandboxStatus'\nimport { EmbedContainer } from './components/EmbedContainer'\nimport { EmbedProps } from './types'\n\nconst EmbedDashboard: React.FC<EmbedProps> = ({ id }) => {\n  const [dashboardNext, setDashboardNext] = React.useState(true)\n  const [running, setRunning] = React.useState(true)\n  const [dashboard, setDashboard] = React.useState<LookerEmbedDashboard>()\n  const extensionContext = useContext<ExtensionContextData2<Looker40SDK>>(\n    ExtensionContext2\n  )\n\n  const toggleDashboard = () => {\n    setDashboardNext(!dashboardNext)\n  }\n\n  const canceller = (event: any) => {\n    return { cancel: !event.modal }\n  }\n\n  const updateRunButton = (running: boolean) => {\n    setRunning(running)\n  }\n\n  const setupDashboard = (dashboard: LookerEmbedDashboard) => {\n    setDashboard(dashboard)\n  }\n\n  const embedCtrRef = useCallback(\n    (el) => {\n      const hostUrl = extensionContext?.extensionSDK?.lookerHostData?.hostUrl\n      if (el && hostUrl) {\n        el.innerHTML = ''\n        LookerEmbedSDK.init(hostUrl)\n        const db = LookerEmbedSDK.createDashboardWithId(id as number)\n        if (dashboardNext) {\n          db.withNext()\n        }\n        db.appendTo(el)\n          .on('dashboard:loaded', updateRunButton.bind(null, false))\n          .on('dashboard:run:start', updateRunButton.bind(null, true))\n          .on('dashboard:run:complete', updateRunButton.bind(null, false))\n          .on('drillmenu:click', canceller)\n          .on('drillmodal:explore', canceller)\n          .on('dashboard:tile:explore', canceller)\n          .on('dashboard:tile:view', canceller)\n          .build()\n          .connect()\n          .then(setupDashboard)\n          .catch((error: Error) => {\n            console.error('Connection error', error)\n          })\n      }\n    },\n    [dashboardNext]\n  )\n\n  const runDashboard = () => {\n    if (dashboard) {\n      dashboard.run()\n    }\n  }\n\n  return (\n    <>\n      <Heading mt=\"xlarge\">Embedded Dashboard</Heading>\n      <SandboxStatus />\n      <Label htmlFor=\"toggle\">\n        Dashboard next\n        <ToggleSwitch\n          ml=\"small\"\n          onChange={toggleDashboard}\n          on={dashboardNext}\n          id=\"toggle\"\n        />\n      </Label>\n      <Button m=\"medium\" onClick={runDashboard} disabled={running}>\n        Run Dashboard\n      </Button>\n      <EmbedContainer ref={embedCtrRef} />\n    </>\n  )\n}\n\nexport default EmbedDashboard\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport styled from 'styled-components'\n\nexport const EmbedContainer = styled.div`\n  width: 100%;\n  height: 95vh;\n  & > iframe {\n    width: 100%;\n    height: 100%;\n  }\n`\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useEffect, useState } from 'react'\nimport { Paragraph } from '@looker/components'\nimport { SandboxStatusProps } from './types'\n\nexport const SandboxStatus: React.FC<SandboxStatusProps> = () => {\n  const [sandboxStatus, setSandboxStatus] = useState('')\n\n  useEffect(() => {\n    try {\n      const parentWindow: any = (window as any).parent\n      // Attempt to get data from the parent window. This\n      // will fail in a sandboxed environment and in most\n      // cases we want this to fail.\n      // eslint-disable-next-line no-unused-expressions\n      parentWindow.looker?.version\n      setSandboxStatus('NOT')\n    } catch (err) {\n      setSandboxStatus('')\n    }\n  }, [])\n\n  return (\n    <Paragraph my=\"medium\">\n      This extension is <b>{sandboxStatus}</b> sandboxed.\n    </Paragraph>\n  )\n}\n"],"sourceRoot":""}