{"version":3,"sources":["webpack://extension-kitchensink/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://extension-kitchensink/./node_modules/@looker/components/lib/Button/ButtonOutline.js","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/utils/validate_data_response.ts","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/components/DataServerDemo/DataServerDemo.tsx","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/components/GoogleSheetsDemo/GoogleSheetsDemo.tsx","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/ExternalApiFunctions.tsx","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/components/Auth/Auth.tsx","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/data/DataReducer.ts","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/index.ts","webpack://extension-kitchensink/./src/components/ExternalApiFunctions/utils/fetch_proxy.ts","webpack://extension-kitchensink/./src/components/SandboxStatus/SandboxStatus.tsx","webpack://extension-kitchensink/./src/utils/extract_message_from_error.ts"],"names":["module","exports","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ButtonOutline","withConfig","displayName","componentId","_ref","theme","_ref$color","color","colors","concat","_ref2","ui2","_ref3","_ref3$color","_ref4","_ref4$color","_ref5","_ref5$color","_ref6","_ref6$color","_ref7","_ref7$color","_ref8","_ref8$color","_ref9","_ref9$color","_ref10","ui3","_ref11","_ref11$color","handleResponse","response","dataDispatch","errorMessage","firstTime","ok","status","updateErrorMessage","undefined","handleError","error","console","extractMessageFromError","startsWith","DataServerDemo","dataState","extensionContext","useContext","ExtensionContext2","extensionSDK","location","useLocation","posts","name","title","useEffect","fetchPosts","onCreatePostSubmit","event","preventDefault","dataServerFetchProxy","getDataServerFetchProxy","state","fetchProxy","POSTS_SERVER_URL","method","headers","body","JSON","stringify","author","updateTitle","onPostDelete","post","id","updatePosts","reverse","dispatchEvent","postsItems","map","actions","DataTableAction","onClick","bind","DataTableItem","DataTableCell","Box","display","flexDirection","justifyContent","mb","alignItems","Text","Button","ml","px","pt","border","borderColor","borderRadius","Form","onSubmit","FieldText","label","onChange","e","currentTarget","required","disabled","length","DataTable","columns","type","size","caption","GoogleSheetsDemo","GOOGLE_CLIENT_ID","googleAccessToken","authOption","spreadsheetId","range","AuthOption","values","updateSheetData","fetchData","sheetData","sheetItems","sheetRow","sex","collegeYear","major","useReducer","dataReducer","dataInitialState","history","useHistory","match","useRouteMatch","tabIndex","parseInt","params","tab","push","pathname","selectedIndex","Number","isNaN","jwtToken","Heading","mt","SandboxStatus","MessageBar","intent","onPrimaryClick","padding","Divider","Auth","TabList","onSelectTab","index","func","Tab","TabPanels","TabPanel","coreSDK","dialogOpen","setDialogOpen","useState","GITHUB_CLIENT_ID","AUTH0_CLIENT_ID","accessToken","dataServerAuthCheck","getGoogleUserInfo","getGithubUserInfo","getAuth0UserInfo","getLookerUserInfo","replace","initialize","dataServerAuth","client_secret","createSecretKeyTag","serverProxy","Accept","jwt_token","dataServerAuthOut","updateName","changeAuthorization","initializeState","googleSignin","oauth2Authenticate","client_id","scope","GOOGLE_SCOPES","response_type","access_token","expires_in","signinDataServer","updateLocationPushState","userInfoResponse","Authorization","githubSignin","authenticateParameters","exchangeParameters","code","codeExchangeResponse","oauth2ExchangeCodeForToken","error_description","auth0Signin","useCodeChallenge","authRequest","AUTH0_SCOPES","code_challenge_method","AUTH0_BASE_URL","exchangeRequest","grant_type","sub","customSignin","me","display_name","chosenAuthOption","expiresIn","signin","authMessage","oauthCodeChallengeSupported","intersects","lookerHostData","lookerVersion","width","Dialog","isOpen","onClose","DialogContent","SpaceVertical","Action","initialState","reducer","action","payload","dispatch","process","locationState","init","createFetchProxy","sandboxStatus","setSandboxStatus","window","parent","looker","version","err","Paragraph","my","message"],"mappings":"gIAeAA,EAAOC,QAfP,SAAyBC,EAAKC,EAAKC,GAYjC,OAXID,KAAOD,EACTG,OAAOC,eAAeJ,EAAKC,EAAK,CAC9BC,MAAOA,EACPG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZP,EAAIC,GAAOC,EAGNF,I,wECVEQ,GAAgB,QAAO,MAAYC,WAAW,CACvDC,YAAa,gBACbC,YAAa,YAFY,CAGxB,CAAC,cAAe,qBAAsB,UAAW,uCAAwC,UAAW,0DAA2D,iBAAkB,UAAW,2DAA4D,iBAAkB,UAAW,QAAQ,SAAUC,GACxS,IAAIC,EAAQD,EAAKC,MACbC,EAAaF,EAAKG,MAClBA,OAAuB,IAAfD,EAAwB,MAAQA,EAC5C,OAAOD,EAAMG,OAAO,GAAGC,OAAOF,EAAO,YACpC,SAAUG,GAEX,OADYA,EAAML,MACLG,OAAOG,OACnB,SAAUC,GACX,IAAIP,EAAQO,EAAMP,MACdQ,EAAcD,EAAML,MACpBA,OAAwB,IAAhBM,EAAyB,MAAQA,EAC7C,OAAOR,EAAMG,OAAOD,MACnB,SAAUO,GACX,IAAIT,EAAQS,EAAMT,MACdU,EAAcD,EAAMP,MACpBA,OAAwB,IAAhBQ,EAAyB,MAAQA,EAC7C,OAAOV,EAAMG,OAAO,GAAGC,OAAOF,EAAO,cACpC,SAAUS,GACX,IAAIX,EAAQW,EAAMX,MACdY,EAAcD,EAAMT,MACpBA,OAAwB,IAAhBU,EAAyB,MAAQA,EAC7C,OAAOZ,EAAMG,OAAO,GAAGC,OAAOF,OAC7B,SAAUW,GACX,IAAIb,EAAQa,EAAMb,MACdc,EAAcD,EAAMX,MACpBA,OAAwB,IAAhBY,EAAyB,MAAQA,EAC7C,OAAOd,EAAMG,OAAO,GAAGC,OAAOF,EAAO,cACpC,SAAUa,GACX,IAAIf,EAAQe,EAAMf,MACdgB,EAAcD,EAAMb,MACpBA,OAAwB,IAAhBc,EAAyB,MAAQA,EAC7C,OAAOhB,EAAMG,OAAO,GAAGC,OAAOF,EAAO,aACpC,SAAUe,GACX,IAAIjB,EAAQiB,EAAMjB,MACdkB,EAAcD,EAAMf,MACpBA,OAAwB,IAAhBgB,EAAyB,MAAQA,EAC7C,OAAOlB,EAAMG,OAAOD,MACnB,SAAUiB,GACX,IAAInB,EAAQmB,EAAMnB,MACdoB,EAAcD,EAAMjB,MACpBA,OAAwB,IAAhBkB,EAAyB,MAAQA,EAC7C,OAAOpB,EAAMG,OAAO,GAAGC,OAAOF,EAAO,YACpC,SAAUmB,GAEX,OADYA,EAAOrB,MACNG,OAAOmB,OACnB,SAAUC,GACX,IAAIvB,EAAQuB,EAAOvB,MACfwB,EAAeD,EAAOrB,MACtBA,OAAyB,IAAjBsB,EAA0B,MAAQA,EAC9C,OAAOxB,EAAMG,OAAOD,O,qLCpBTuB,EAAiB,SAC5BC,EACAC,GAGY,IAFZC,EAEY,uDAFG,mFACfC,EACY,yDACN,GAAEC,EAAF,OAAMC,GAAWL,EACvB,OAAII,GACGD,IACHG,QAAmBL,OAAcM,IAE5B,IAEQ,MAAXF,GACFC,QAAmBL,EAAc,mBAEjCK,QAAmBL,EAAcC,IAE5B,IAYEM,EAAc,SACzBC,EACAR,GAEG,IADHE,EACG,wDACHO,QAAQD,MAAMA,GACd,IAAMP,GAAeS,OAAwBF,GACzCP,EAAaU,WAAW,+CAC1BN,QAAmBL,EAAcC,GACxBA,EAAaU,WAAW,6BACjCN,QACEL,EACA,kEAEOC,EAAaU,WAAW,iCACjCN,QACEL,EACA,kEAEOE,GACTG,QACEL,EACA,mEAGFK,QACEL,EADgB,uCAEgBC,K,sBC7BzBW,EAAiD,IAGxD,IAHwD,aAC5DZ,EAD4D,UAE5Da,GACI,EAEEC,GAAmBC,gBACvBC,sBAEI,aAAEC,GAAiBH,EAEnBI,GAAWC,WAGX,MAAEC,EAAF,KAASC,EAAT,MAAeC,GAAUT,GAE/BU,gBAAU,KAERC,GAAW,KACV,IAGH,IAAMC,EAAkB,sBAAG,UAAOC,GAIhCA,EAAMC,iBAEN,IAME,IAAMC,GAAuBC,OAC3BZ,EACAC,EAASY,OAEL/B,QAAiB6B,EAAqBG,WAArB,UAClBC,KADkB,UAErB,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBf,QACAgB,OAAQjB,MAIVvB,EAAeC,EAAUC,EAAc,4BACzCuC,QAAYvC,EAAc,IAC1BwB,KAEF,MAAOhB,GACPD,EAAYC,EAAOR,OAlCC,sDAuClBwC,EAAY,sBAAG,UAAOC,GAG1B,IACE,IAAMb,GAAuBC,OAC3BZ,EACAC,EAASY,OAEL/B,QAAiB6B,EAAqBG,WAArB,UAClBC,KADkB,kBACQS,EAAKC,IAClC,CACET,OAAQ,WAGRnC,EAAeC,EAAUC,EAAc,4BACzCuC,QAAYvC,EAAc,IAC1BwB,KAEF,MAAOhB,GACPD,EAAYC,EAAOR,OAnBL,sDAwBZwB,EAAU,sBAAG,YAA6B,IAAtBtB,EAAsB,wDAC9C,IAKE,IAAM0B,GAAuBC,OAC3BZ,EACAC,EAASY,OAEL/B,QAAiB6B,EAAqBG,WAArB,UAClBC,KADkB,WAGnBlC,EAAeC,EAAUC,OAAcM,EAAWJ,KACpDyC,QAAY3C,EAAcD,EAASoC,KAAKS,WAE1C,MAAOpC,GACPD,EAAYC,EAAOqC,cAAe3C,OAjBtB,qDAiDV4C,EAAa1B,EAAM2B,KAAKN,IAE5B,IAAMO,EACJ,gCACE,gBAAC,EAAAC,gBAAD,CAAiBC,QAASV,EAAaW,KAAK,KAAMV,IAAlD,YAOE,GAAEC,EAAF,MAAMpB,EAAN,OAAagB,GAAWG,EAC9B,OACE,gBAAC,EAAAW,cAAD,CAAe3F,IAAKiF,EAAIA,GAAIA,EAAIM,QAASA,GACvC,gBAAC,EAAAK,cAAD,KAAgBX,GAChB,gBAAC,EAAAW,cAAD,KAAgB/B,GAChB,gBAAC,EAAA+B,cAAD,KAAgBf,OAKtB,OACE,gCACE,gBAAC,EAAAgB,IAAD,CACEC,QAAQ,OACRC,cAAc,MACdC,eAAe,gBACfC,GAAG,SACHC,WAAW,YAEX,gBAAC,EAAAC,KAAD,wCAAuC5B,MACvC,gBAAC,EAAAsB,IAAD,CAAKC,QAAQ,OAAOC,cAAc,MAAMG,WAAW,YACjD,gBAACE,EAAA,EAAD,CAAQC,GAAG,QAAQZ,QAAS,IAAM1B,KAAlC,kBAKJ,gBAAC,EAAA8B,IAAD,CACEI,GAAG,SACHK,GAAG,SACHC,GAAG,QACHC,OAAO,YACPC,YAAY,sBACZC,aAAa,OAEb,gBAAC,EAAAC,KAAD,CAAMC,SAAU5C,GACd,gBAAC,EAAA6C,UAAD,CACEC,MAAM,QACNlD,KAAK,QACL3D,MAAO4D,EACPkD,SA7EaC,KACrBlC,QAAYvC,EAAcyE,EAAEC,cAAchH,QA6ElCiH,UAAQ,IAEV,gBAACd,EAAA,EAAD,CAAQe,SAA2B,IAAjBtD,EAAMuD,QAAxB,iBAGJ,gBAAC,EAAAC,UAAD,CAAWC,QA9EwB,CACrC,CACErC,GAAI,KACJpB,MAAO,KACP0D,KAAM,SACNC,KAAM,IAER,CACEvC,GAAI,QACJpB,MAAO,QACP0D,KAAM,SACNC,KAAM,IAER,CACEvC,GAAI,SACJpB,MAAO,SACP0D,KAAM,SACNC,KAAM,KA6D4BC,QAAQ,SACvCpC,KC9MIqC,EAAqD,IAG5D,IAH4D,aAChEnF,EADgE,UAEhEa,GACI,EAEEC,GAAmBC,gBACvBC,sBAEI,aAAEC,GAAiBH,EAGnBI,GAAWC,WAEjBI,gBAAU,MAEO,sBAAG,YAEhB,GAAyB,KAArB6D,MACF/E,QACEL,EACA,qFAEG,CACL,IAAM,kBAAEqF,EAAF,WAAqBC,GAAepE,EAASY,MAC7CyD,EAAgB,+CAChBC,EAAQ,kBACd,IACE,GAAIF,IAAeG,YAEjB,GAAKJ,EAGE,CAIL,IAAMtF,QAAiBkB,EAAac,WAAb,wDAC4BwD,EAD5B,mBACoDC,EADpD,yBAC0EH,IAEjG,GAAIvF,EAAeC,EAAUC,GAAe,OACpC0F,GAAgB,UAAA3F,EAASoC,YAAT,eAAeuD,SAAU,IAC/CC,QAAgB3F,EAAc0F,SAVhCrF,QAAmBL,EAAc,sCAa9B,CAIL,IAAM4B,GAAuBC,OAC3BZ,EACAC,EAASY,OAEL/B,QAAiB6B,EAAqBG,WAArB,UAClBC,KADkB,mBACSuD,EADT,YAC0BC,IAEjD,GAAI1F,EAAeC,EAAUC,GAAe,OACpC0F,GAAgB,UAAA3F,EAASoC,YAAT,eAAeuD,SAAU,IAC/CC,QAAgB3F,EAAc0F,KAGlC,MAAOlF,GACPD,EAAYC,EAAOqC,oBA9CV,oDAoDf+C,KACC,IAEH,IAAM,UAAEC,GAAchF,EAqChBiF,GAAcD,GAAa,IAAI9C,KAAKgD,IAExC,IAAO1E,EAAM2E,EAAKC,EAAanE,EAAOoE,GAASH,EAC/C,OACE,gBAAC,EAAA3C,cAAD,CAAe3F,IAAK4D,EAAMqB,GAAIrB,GAC5B,gBAAC,EAAAgC,cAAD,KAAgBhC,GAChB,gBAAC,EAAAgC,cAAD,KAAgB2C,GAChB,gBAAC,EAAA3C,cAAD,KAAgB4C,GAChB,gBAAC,EAAA5C,cAAD,KAAgBvB,GAChB,gBAAC,EAAAuB,cAAD,KAAgB6C,OAKtB,OACE,gCACGL,GACC,gBAAC,EAAAf,UAAD,CAAWC,QAnDsB,CACrC,CACErC,GAAI,OACJpB,MAAO,OACP0D,KAAM,SACNC,KAAM,UAER,CACEvC,GAAI,MACJpB,MAAO,MACP0D,KAAM,SACNC,KAAM,UAER,CACEvC,GAAI,cACJpB,MAAO,OACP0D,KAAM,SACNC,KAAM,UAER,CACEvC,GAAI,QACJpB,MAAO,QACP0D,KAAM,SACNC,KAAM,UAER,CACEvC,GAAI,QACJpB,MAAO,QACP0D,KAAM,SACNC,KAAM,WAsB8BC,QAAQ,eACvCY,KCtCX,QAhFkE,KAIhE,IAAOjF,EAAWb,IAAgBmG,gBAAWC,KAAaC,MAGpDC,GAAUC,UACVrF,GAAWC,UACXqF,GAAQC,QAA6C,gBAG3DlF,gBAAU,KAAM,MACRmF,EAAWC,UAASH,SAAA,UAAAA,EAAOI,cAAP,eAAeC,MAAO,OAE5CH,EAAW,GAAKA,EAAW,IAC7BJ,EAAQQ,KAAR,UAAgB5F,EAAS6F,SAAzB,MAAuC7F,EAASY,SAEjD,IAIH,IAAIkF,EAAgBR,EAAQS,OAAOT,EAAMI,OAAOC,KAAO,EACvDG,EAAgBE,MAAMF,IAAkB,EAAIA,EAC5C,IAaM,aAAE/G,GAAiBY,GACnB,SAAEsG,GAAcjG,EAASY,OAAiB,GAEhD,OACE,gCACE,gBAAC,EAAAsF,QAAD,CAASC,GAAG,UAAZ,0BACA,gBAACC,EAAA,EAAD,MACCrH,GACC,gBAAC,EAAAsH,WAAD,CAAYC,OAAO,WAAWC,eAblB,MAChBpH,QAAmBL,OAAcM,KAa1BL,GAGL,gBAAC,EAAAqD,IAAD,CAAKoE,QAAQ,SACX,gBAAC,EAAAC,QAAD,MACA,gBAACC,OAAD,CAAM5H,aAAcA,EAAca,UAAWA,IAC7C,gBAAC,EAAA8G,QAAD,MACCR,GACC,gCACE,gBAAC,EAAAU,QAAD,CAASb,cAAeA,EAAec,YA/B5BC,IAAkB,MAEb,EADPpB,UAASH,SAAA,UAAAA,EAAOI,cAAP,eAAeC,MAAO,QAC/BkB,GACfzB,EAAQQ,KAAR,WAAiBN,SAAjB,UAAiBA,EAAOI,cAAxB,aAAiB,EAAeoB,KAAhC,YAAwCD,GAAS7G,EAASY,SA6BlD,gBAAC,EAAAmG,IAAD,yBACA,gBAAC,EAAAA,IAAD,4BAEF,gBAAC,EAAAC,UAAD,CAAWlB,cAAeA,GACxB,gBAAC,EAAAmB,SAAD,KACE,gBAACvH,EAAD,CACEZ,aAAcA,EACda,UAAWA,KAGf,gBAAC,EAAAsH,SAAD,KACE,gBAAChD,EAAD,CACEnF,aAAcA,EACda,UAAWA,W,oxBCxDtB,IAAM+G,EAA6B,IAAgC,OAAhC,UAAE/G,EAAF,aAAab,GAAmB,GAElE,aAAEiB,EAAF,QAAgBmH,IAAYrH,gBAEhCC,sBAGKqH,EAAYC,IAAiBC,eAAS,GAGvCjC,GAAUC,UACVrF,GAAWC,WAGX,KAAEE,GAASR,GAGjBU,gBAAU,MACQ,sBAAG,YACjB,GACuB,KAArB6D,MACqB,KAArBoD,MACoB,KAApBC,KAHF,CAWA,IAAM,WAAEnD,EAAF,YAAcoD,EAAd,SAA2BvB,GAAajG,EAASY,OAAS,GAChE,GAAIqF,EAGF,SAD2BwB,IAGzB,OAAQrD,GACN,KAAKG,YACHmD,EAAkBF,GAClB,MACF,KAAKjD,YACHoD,EAAkBH,GAClB,MACF,KAAKjD,WACHqD,EAAiBJ,GACjB,MACF,QACEK,SAIJzC,EAAQ0C,QAAQ9H,EAAS6F,SAAU,SA3BrC1G,QACEL,EACA,qGARU,oDAqChBiJ,KACC,IAGH,IAAMN,EAAmB,sBAAG,YAC1B,IACE,IAAM/G,GAAuBC,OAC3BZ,EACAC,EAASY,OAKX,aAHuBF,EAAqBG,WAArB,UAClBC,KADkB,WAGP7B,GAChB,MAAOK,GAEP,OADAC,QAAQD,MAAMA,IACP,MAZc,qDAqBnB0I,EAAc,sBAAG,UAAO/G,GAC5B,IAEEA,EAAKgH,cAAgBlI,EAAamI,mBAAmB,qBACrD,IAAMrJ,QAAiBkB,EAAaoI,YAAb,UAClBrH,KADkB,SAErB,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBoH,OAAQ,oBAEVnH,KAAMC,KAAKC,UAAUF,KAGzB,GAAIpC,EAASI,IAAMJ,EAASoC,MAAQpC,EAASoC,KAAKoH,UAChD,OAAOxJ,EAASoC,KAAKoH,UAEvB,MAAO/I,GACPC,QAAQD,MAAMA,OAnBE,sDAyBdgJ,EAAiB,sBAAG,YACxB,KAC+B3H,OAC3BZ,EACAC,EAASY,OAEUC,WAArB,UAAmCC,KAAnC,aACA,MAAOxB,GACPC,QAAQD,MAAMA,IAEhBiJ,QAAWzJ,EAAc,OAVJ,qDAejB0J,EAAmB,sBAAG,YAC1B,IAAM,SAAEvC,GAAajG,EAASY,OAAS,IACvCzB,QAAmBL,OAAcM,GAC7B6G,IACFwC,QAAgB3J,SACVwJ,IACNlD,EAAQ0C,QAAQ9H,EAAS6F,SAAU,KAEnCuB,GAAc,MARO,qDAanBsB,EAAY,sBAAG,YACnB,IACE,IAAM7J,QAAiBkB,EAAa4I,mBAClC,+CACA,CACEC,UAAW1E,KACX2E,MAAOC,KACPC,cAAe,WAGb,aAAEC,EAAF,WAAgBC,GAAepK,GAE/B,GAAE2C,EAAIrB,cAAeuH,EAAkBsB,GACvC/C,QAAiBiD,EACrB3E,YACA/C,EACArB,EACA6I,EACAC,GAEFE,EACE5E,YACA0B,EACA+C,EACAA,GAEF,MAAO1J,IACcE,OAAwBF,GAE9BG,WACX,6DAGFN,QACEL,EACA,0GAGFK,QAAmBL,EAAc,gBACjCS,QAAQD,MAAM,kBAAmBA,QAvCrB,qDA6CZoI,EAAiB,sBAAG,UAAOF,GAC/B,IAAIrH,EAAO,UACPqB,EAAK,UACT,IAEE,IAQyB,IARnB4H,QAAyBrJ,EAAac,WAAb,gDAE7B,CACEG,QAAS,CACPqI,cAAe,UAAF,OAAY7B,MAI3B4B,EAAiBnK,KACnBkB,GAAO,UAAAiJ,EAAiBnI,YAAjB,eAAuBd,OAAQ,UACtCqB,GAAK,UAAA4H,EAAiBnI,YAAjB,eAAuBO,KAAM,WAEpC,MAAOlC,GACP,IAAMP,GAAeS,OAAwBF,IAC7CH,QAAmBL,EAAcC,GACjCQ,QAAQD,MAAMA,GAGhB,OADAiJ,QAAWzJ,EAAcqB,GAClB,CAAEqB,KAAIrB,WAvBQ,sDA2BjBmJ,EAAY,sBAAG,YACnB,IAAMC,EAAiD,CACrDX,UAAWtB,KACXyB,cAAe,QAEjB,IACE,IAAMlK,QAAiBkB,EAAa4I,mBAClC,2CACAY,EACA,OAKIC,EAA6C,CACjDZ,UAAWtB,KACXmC,KAAM5K,EAAS4K,KACfxB,cAAelI,EAAamI,mBAAmB,sBAE3CwB,QAA6B3J,EAAa4J,2BAC9C,8CACAH,IAEI,aAAER,EAAF,kBAAgBY,GAAsBF,EAC5C,GAAKV,EAKE,CACL,IAAM,GAAExH,EAAIrB,cAAewH,EAAkBqB,GAC7C,GAAKxH,EAKE,CACL,IAAMyE,QAAiBiD,EACrB3E,YACA/C,EACArB,EACA6I,GAEFG,EAAwB5E,YAAmB0B,EAAU+C,QAXrD7J,QACEL,EACA,kDATJK,QACEL,EACA8K,GAAqB,yBAmBzB,MAAOtK,IACcE,OAAwBF,GAE9BG,WACX,6DAGFN,QACEL,EACA,wJAGFK,QAAmBL,EAAc,gBACjCS,QAAQD,MAAM,kBAAmBA,QA3DrB,qDAiEZqI,EAAiB,sBAAG,UAAOH,GAC/B,IAAIrH,EACAqB,EACJ,IACE,IAQyB,IARnB4H,QAAyBrJ,EAAac,WAC1C,8BACA,CACEG,QAAS,CACPqI,cAAe,UAAF,OAAY7B,MAI3B4B,EAAiBnK,KACnBkB,GAAO,UAAAiJ,EAAiBnI,YAAjB,eAAuBd,OAAQ,UACtCqB,GAAK,UAAA4H,EAAiBnI,YAAjB,eAAuBO,KAAM,WAEpC,MAAOlC,GACP,IAAMP,GAAeS,OAAwBF,IAC7CH,QAAmBL,EAAcC,GACjCQ,QAAQD,MAAMA,GAGhB,OADAiJ,QAAWzJ,EAAcqB,GAClB,CAAEqB,KAAIrB,WAtBQ,sDA0BjB0J,EAAW,sBAAG,UAAOC,GACzB,IACE,IAAMC,EAAsC,CAC1CnB,UAAWrB,KACXwB,cAAe,OACfF,MAAOmB,MAELF,IAOFC,EAAYE,sBAAwB,QAEtC,IAAMpL,QAAiBkB,EAAa4I,mBAAb,UAClBuB,KADkB,cAErBH,EACA,OAEII,EAA0C,CAC9CC,WAAY,qBACZxB,UAAWrB,KACXkC,KAAM5K,EAAS4K,MAEZK,IAGHK,EAAgBlC,cAAgBlI,EAAamI,mBAC3C,qBAIJ,IAAMwB,QAA6B3J,EAAa4J,2BAAb,UAC9BO,KAD8B,sBAEjCC,IAEI,aAAEnB,EAAF,WAAgBC,GAAeS,GAC/B,GAAElI,EAAIrB,cAAeyH,EAAiBoB,GACtC/C,QAAiBiD,EACrB3E,WACA/C,EACArB,EACA6I,EACAC,GAEFE,EAAwB5E,WAAkB0B,EAAU+C,GACpD,MAAO1J,IACcE,OAAwBF,GAE9BG,WACX,6DAGFN,QACEL,EADgB,sBAEDoL,KAFC,4BAEiCA,KAFjC,qEAKlB/K,QAAmBL,EAAc,gBACjCS,QAAQD,MAAM,kBAAmBA,QA7DtB,sDAmEXsI,EAAgB,sBAAG,UAAOJ,GAC9B,IAAIrH,EAAO,UACPqB,EAAK,UACT,IACE,IAQyB,IARnB4H,QAAyBrJ,EAAac,WAAb,UAC1BqJ,KAD0B,aAE7B,CACElJ,QAAS,CACPqI,cAAe,UAAF,OAAY7B,MAI3B4B,EAAiBnK,KACnBkB,GAAO,UAAAiJ,EAAiBnI,YAAjB,eAAuBd,OAAQ,UACtCqB,GAAK,UAAA4H,EAAiBnI,YAAjB,eAAuBoJ,MAAO,WAErC,MAAO/K,GACP,IAAMP,GAAeS,OAAwBF,IAC7CH,QAAmBL,EAAcC,GACjCQ,QAAQD,MAAMA,GAGhB,OADAiJ,QAAWzJ,EAAcqB,GAClB,CAAEqB,KAAIrB,WAtBO,sDA0BhBmK,EAAY,sBAAG,YACnB,IAAM,GAAE9I,EAAF,KAAMrB,SAAe0H,IAC3B,IACE,IAAM5B,QAAiBiD,EAAiB3E,YAAmB/C,EAAIrB,GAC/DgJ,EAAwB5E,YAAmB0B,GAC3C,MAAO3G,IACPH,QAAmBL,EAAc,gBACjCS,QAAQD,MAAM,kBAAmBA,OAPnB,qDAYZuI,EAAiB,sBAAG,YACxB,IAAI1H,EAAO,UACPqB,EAAsB,UAC1B,IAEE,IAAMhF,QAAc0K,EAAQjI,GAAGiI,EAAQqD,MACvCpK,EAAO3D,EAAMgO,cAAgB,UAC7BhJ,EAAKhF,EAAMgF,IAAM,UACjB,MAAOlC,GACP,IAAMP,GAAeS,OAAwBF,IAC7CH,QAAmBL,EAAcC,GACjCQ,QAAQD,MAAMA,GAGhB,OADAiJ,QAAWzJ,EAAcqB,GAClB,CAAEqB,KAAIrB,WAdQ,qDAoBjB+I,EAAgB,sBAAG,UACvBuB,EACAjJ,EACArB,EACAqH,EACAkD,GAKA,IAAMzE,QAAiB+B,EAAe,CACpClE,KAAM2G,EACNzB,aAAcxB,EACdyB,WAAYyB,EACZvK,OACAqB,OAKF,OAHKyE,IACH9G,QAAmBL,EAAc,gBAE5BmH,KApBa,8DAyBhBkD,EAA0B,CAC9BsB,EACAxE,EACAuB,EACArD,KAUI8B,EACFb,EAAQ0C,QAAQ9H,EAAS6F,SAAzB,OACK7F,EAASY,OADd,IAEEwD,WAAYqG,EACZjD,cACAvB,WACA9B,uBAGFiB,EAAQ0C,QAAQ9H,EAAS6F,SAAU,KASjC8E,EAAUF,IAEd,OADArD,GAAc,GACNqD,GACN,KAAKlG,YACHmE,IACA,MACF,KAAKnE,YACH+E,IACA,MACF,KAAK/E,WACHsF,GAAY,GACZ,MACF,KAAKtF,cACHsF,GAAY,GACZ,MACF,QACES,MAUFM,EAAc,IACZ,SAAE3E,EAAF,WAAY7B,GAAepE,EAASY,OAAS,GACnD,GAAIqF,EACF,OAAQ7B,GACN,KAAKG,YACHqG,EAAc,GAAH,OAAMzK,EAAN,qCACX,MACF,KAAKoE,YACHqG,EAAc,GAAH,OAAMzK,EAAN,qCACX,MACF,KAAKoE,WACHqG,EAAc,GAAH,OAAMzK,EAAN,oCACX,MACF,QACEyK,EAAc,GAAH,OAAMzK,EAAN,6BAGfyK,EAAc,0BAGhB,IAAMC,GAA8BC,gBAClC,YACA,UAAA/K,EAAagL,sBAAb,eAA6BC,gBAAiB,SAC9C,GAGF,OACE,gBAAC,EAAA5I,IAAD,CACEC,QAAQ,OACRC,cAAc,MACd2I,MAAM,OACN1I,eAAe,gBACfE,WAAW,UAEX,gBAAC,EAAAC,KAAD,KAAOkI,GACP,gBAAC,IAAD,CAAQ5I,QAASwG,GACdvC,EAAW,WAAa,WAE3B,gBAAC,EAAAiF,OAAD,CAAQC,OAAQhE,EAAYiE,QA3CZ,KAClBhE,GAAc,IA0CsC6D,MAAM,QACtD,gBAAC,EAAAI,cAAD,KACE,gBAAC,EAAAnF,QAAD,wCACA,gBAAC,EAAAoF,cAAD,CAAenF,GAAG,SAAS3D,GAAG,SAC5B,gBAAC,IAAD,CACEyI,MAAM,OACNjJ,QAAS2I,EAAO1I,KAAK,KAAMsC,aAC3Bb,SAA+B,KAArBQ,MAHZ,0CAOA,gBAAC,IAAD,CACE+G,MAAM,OACNjJ,QAAS2I,EAAO1I,KAAK,KAAMsC,aAC3Bb,SAA+B,KAArB4D,MAHZ,sDAOA,gBAAC,IAAD,CACE2D,MAAM,OACNjJ,QAAS2I,EAAO1I,KAAK,KAAMsC,YAC3Bb,SAA8B,KAApB6D,MAHZ,qDAOA,gBAAC,IAAD,CACE0D,MAAM,OACNjJ,QAAS2I,EAAO1I,KAAK,KAAMsC,eAC3Bb,SAA8B,KAApB6D,OAA2BsD,GAHvC,yDAOA,gBAAC,IAAD,CACEI,MAAM,OACNjJ,QAAS2I,EAAO1I,KAAK,KAAMsC,cAF7B,0C,41BClmBL,IAiBFgH,EAjBQC,EAA0B,CACrCtL,MAAO,GACPC,KAAM,GACNC,MAAO,GACPrB,kBAAcK,I,SAaXmM,O,2BAAAA,I,6BAAAA,I,2BAAAA,I,6BAAAA,I,2CAAAA,I,sCAAAA,M,KAUE,IAAME,EAAU,CAAC7K,EAAkB8K,KACxC,IAAM,KAAE5H,EAAF,QAAQ6H,GAAYD,EAC1B,OAAQ5H,GACN,KAAKyH,EAAO9J,YACV,cACKb,GADL,IAEEV,MAAOyL,IAEX,KAAKJ,EAAOhD,WACV,cACK3H,GADL,IAEET,KAAMwL,IAEV,KAAKJ,EAAOlK,YACV,cACKT,GADL,IAEER,MAAOuL,IAEX,KAAKJ,EAAOpM,mBACV,cACKyB,GADL,IAEE7B,aAAc4M,IAElB,KAAKJ,EAAO9G,gBACV,cACK7D,GADL,IAEE+D,UAAWgH,IAEf,KAAKJ,EAAOxD,WACV,YAAYyD,GACd,QACE,OAAO5K,IASAa,EAAc,CAACmK,EAAyB1L,IACnD0L,EAAS,CAAE9H,KAAMyH,EAAO9J,YAAakK,QAASzL,IAOnCqI,EAAa,CAACqD,EAAyBzL,IAClDyL,EAAS,CAAE9H,KAAMyH,EAAOhD,WAAYoD,QAASxL,IAOlCkB,EAAc,CAACuK,EAAyBxL,IACnDwL,EAAS,CAAE9H,KAAMyH,EAAOlK,YAAasK,QAASvL,IAOnCjB,EAAqB,CAChCyM,EACA7M,IACG6M,EAAS,CAAE9H,KAAMyH,EAAOpM,mBAAoBwM,QAAS5M,IAO7C0F,EAAkB,CAACmH,EAAyBjH,IACvDiH,EAAS,CAAE9H,KAAMyH,EAAO9G,gBAAiBkH,QAAShH,IAMvC8D,EAAmBmD,GAC9BA,EAAS,CAAE9H,KAAMyH,EAAOxD,c,6BCnHnB,IAAKxD,E,0FAAAA,K,gBAAAA,E,gBAAAA,E,gBAAAA,E,cAAAA,E,qBAAAA,M,KAUL,IAAMzD,EAAmB+K,wBAKnB3H,EAAmB2H,GAGnB/C,EACX,yGAGWxB,EAAmBuE,GAGnBtE,EAAkBsE,GAGlB7B,EACX,6EAEWE,EAAiB2B,I,8CCrBvB,IAAMlL,EAA0B,CACrCZ,EACA+L,KAEA,IAAMC,EAA8B,GAMpC,OALID,GAAiBA,EAAc7F,WACjC8F,EAAK/K,QAAU,CACbqI,cAAe,UAAF,OAAYyC,EAAc7F,YAGpClG,EAAaiM,sBAAiB5M,EAAW2M,K,wECjBrC3F,EAA8C,KACzD,IAAO6F,EAAeC,IAAoB7E,cAAS,IAgBnD,OAdAhH,gBAAU,KACR,IAAI,MAMF,UAL2B8L,OAAeC,OAK7BC,cAAb,SAAqBC,QACrBJ,EAAiB,OACjB,MAAOK,GACPL,EAAiB,OAElB,IAGD,gBAAC,EAAAM,UAAD,CAAWC,GAAG,UAAd,qBACoB,yBAAIR,GADxB,iB,8CCvBG,IAAMzM,EAA2BF,GACjB,iBAAVA,EACFA,EAELA,EAAMoN,QACDpN,EAAMoN,QAEf,UAAUpN","file":"external_api_functions.bundle.js","sourcesContent":["function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","import styled from 'styled-components';\nimport { ButtonBase } from './ButtonBase';\nexport var ButtonOutline = styled(ButtonBase).withConfig({\n  displayName: \"ButtonOutline\",\n  componentId: \"ncggc7-0\"\n})([\"background:\", \";border:1px solid \", \";color:\", \";&:hover,&:focus,&.hover{background:\", \";color:\", \";}&[aria-expanded='true'],&:active,&.active{background:\", \";border-color:\", \";color:\", \";}&[disabled]{&:hover,&:active,&:focus{background-color:\", \";border-color:\", \";color:\", \";}}\"], function (_ref) {\n  var theme = _ref.theme,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'key' : _ref$color;\n  return theme.colors[\"\".concat(color, \"Text\")];\n}, function (_ref2) {\n  var theme = _ref2.theme;\n  return theme.colors.ui2;\n}, function (_ref3) {\n  var theme = _ref3.theme,\n      _ref3$color = _ref3.color,\n      color = _ref3$color === void 0 ? 'key' : _ref3$color;\n  return theme.colors[color];\n}, function (_ref4) {\n  var theme = _ref4.theme,\n      _ref4$color = _ref4.color,\n      color = _ref4$color === void 0 ? 'key' : _ref4$color;\n  return theme.colors[\"\".concat(color, \"Subtle\")];\n}, function (_ref5) {\n  var theme = _ref5.theme,\n      _ref5$color = _ref5.color,\n      color = _ref5$color === void 0 ? 'key' : _ref5$color;\n  return theme.colors[\"\".concat(color)];\n}, function (_ref6) {\n  var theme = _ref6.theme,\n      _ref6$color = _ref6.color,\n      color = _ref6$color === void 0 ? 'key' : _ref6$color;\n  return theme.colors[\"\".concat(color, \"Accent\")];\n}, function (_ref7) {\n  var theme = _ref7.theme,\n      _ref7$color = _ref7.color,\n      color = _ref7$color === void 0 ? 'key' : _ref7$color;\n  return theme.colors[\"\".concat(color, \"Focus\")];\n}, function (_ref8) {\n  var theme = _ref8.theme,\n      _ref8$color = _ref8.color,\n      color = _ref8$color === void 0 ? 'key' : _ref8$color;\n  return theme.colors[color];\n}, function (_ref9) {\n  var theme = _ref9.theme,\n      _ref9$color = _ref9.color,\n      color = _ref9$color === void 0 ? 'key' : _ref9$color;\n  return theme.colors[\"\".concat(color, \"Text\")];\n}, function (_ref10) {\n  var theme = _ref10.theme;\n  return theme.colors.ui3;\n}, function (_ref11) {\n  var theme = _ref11.theme,\n      _ref11$color = _ref11.color,\n      color = _ref11$color === void 0 ? 'key' : _ref11$color;\n  return theme.colors[color];\n});\n//# sourceMappingURL=ButtonOutline.js.map","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { Dispatch } from 'react'\nimport { FetchProxyDataResponse } from '@looker/extension-sdk'\nimport { extractMessageFromError } from '../../../utils'\nimport { updateErrorMessage } from '../data/DataReducer'\n\n/**\n * Utility method to handle responses from the data server. Will log the user out\n * if a 401 response is returned.\n * @param response\n * @param dataDispatch\n * @param errorMessage\n */\nexport const handleResponse = (\n  response: FetchProxyDataResponse,\n  dataDispatch: Dispatch<any>,\n  errorMessage = 'Unexpected error. Has the data server been started? yarn start start-data-server',\n  firstTime = false\n): boolean => {\n  const { ok, status } = response\n  if (ok) {\n    if (!firstTime) {\n      updateErrorMessage(dataDispatch, undefined)\n    }\n    return true\n  } else {\n    if (status === 401) {\n      updateErrorMessage(dataDispatch, 'Token expired!')\n    } else {\n      updateErrorMessage(dataDispatch, errorMessage)\n    }\n    return false\n  }\n}\n\n/**\n * Standard error handling for data server response. Parses out the error messages and\n * provides feed to user if environment has not been setup correctly (for example\n * data server not running).\n * @param error\n * @param dataDispatch\n * @param firstTime\n */\nexport const handleError = (\n  error: any,\n  dataDispatch: Dispatch<any>,\n  firstTime = false\n) => {\n  console.error(error)\n  const errorMessage = extractMessageFromError(error)\n  if (errorMessage.startsWith('Extension not entitled to access external ')) {\n    updateErrorMessage(dataDispatch, errorMessage)\n  } else if (errorMessage.startsWith('Required Looker version ')) {\n    updateErrorMessage(\n      dataDispatch,\n      'This version of Looker does not support external API functions'\n    )\n  } else if (errorMessage.startsWith('Entitlements must be defined')) {\n    updateErrorMessage(\n      dataDispatch,\n      'Entitlements must be defined to use external API functionality'\n    )\n  } else if (firstTime) {\n    updateErrorMessage(\n      dataDispatch,\n      'Has the data server been started? yarn start start-data-server'\n    )\n  } else {\n    updateErrorMessage(\n      dataDispatch,\n      `An unexpected error occured: ${errorMessage}`\n    )\n  }\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useContext, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport {\n  DataTable,\n  DataTableAction,\n  DataTableColumns,\n  DataTableItem,\n  DataTableCell,\n  Box,\n  Button,\n  FieldText,\n  Form,\n  Text,\n} from '@looker/components'\nimport { Looker40SDK } from '@looker/sdk'\nimport {\n  ExtensionContext2,\n  ExtensionContextData2,\n} from '@looker/extension-sdk-react'\nimport { updatePosts, updateTitle } from '../../data/DataReducer'\nimport { handleResponse, handleError } from '../../utils/validate_data_response'\nimport { getDataServerFetchProxy } from '../../utils/fetch_proxy'\nimport { POSTS_SERVER_URL } from '../..'\nimport { DataServerDemoProps } from './types'\n\n/**\n * Demonstration of Looker extension SDK external API use, fetchProxy\n *\n * A note on state. This component is rendered in a tab panel and such\n * can get unloaded while an asynchronous operation is in progress. Rather\n * than attempt to update state in this component after the component is\n * unmounted and get a nasty message in the console, state is held in the\n * parent component. Thus if the component is unloaded, no messages appear\n * in the console. The added advantage is that data will be ready to\n * display should the component be remounted.\n *\n * A note on data. A simple json server is provided. This server must be\n * started in order for this demo to work.\n */\nexport const DataServerDemo: React.FC<DataServerDemoProps> = ({\n  dataDispatch,\n  dataState,\n}) => {\n  // Get access to the extension SDK and the looker API SDK.\n  const extensionContext = useContext<ExtensionContextData2<Looker40SDK>>(\n    ExtensionContext2\n  )\n  const { extensionSDK } = extensionContext\n  // React router location\n  const location = useLocation()\n\n  // Get state from the reducer\n  const { posts, name, title } = dataState\n\n  useEffect(() => {\n    // First time in get the posts\n    fetchPosts(true)\n  }, [])\n\n  // Handle creation of a post.\n  const onCreatePostSubmit = async (event: React.FormEvent) => {\n    // Need to prevent default processing for event from occurring.\n    // The button is rendered in a form and default action is to\n    // submit the form.\n    event.preventDefault()\n\n    try {\n      // A more complex use of the fetch proxy. In this case the\n      // content type must be included in the headers as the json server\n      // will not process it otherwise.\n      // Note the that JSON object in the string MUST be converted to\n      // a string.\n      const dataServerFetchProxy = getDataServerFetchProxy(\n        extensionSDK,\n        location.state\n      )\n      const response = await dataServerFetchProxy.fetchProxy(\n        `${POSTS_SERVER_URL}/posts`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            title,\n            author: name,\n          }),\n        }\n      )\n      if (handleResponse(response, dataDispatch, 'Failed to create post')) {\n        updateTitle(dataDispatch, '')\n        fetchPosts()\n      }\n    } catch (error) {\n      handleError(error, dataDispatch)\n    }\n  }\n\n  // Handle deletion of a post message\n  const onPostDelete = async (post: any) => {\n    // Slightly more complex use of the fetch method. In this case\n    // the DELETE method is used.\n    try {\n      const dataServerFetchProxy = getDataServerFetchProxy(\n        extensionSDK,\n        location.state\n      )\n      const response = await dataServerFetchProxy.fetchProxy(\n        `${POSTS_SERVER_URL}/posts/${post.id}`,\n        {\n          method: 'DELETE',\n        }\n      )\n      if (handleResponse(response, dataDispatch, 'Failed to delete post')) {\n        updateTitle(dataDispatch, '')\n        fetchPosts()\n      }\n    } catch (error) {\n      handleError(error, dataDispatch)\n    }\n  }\n\n  // Fetch the posts\n  const fetchPosts = async (firstTime = false) => {\n    try {\n      // Use the extension SDK external API fetch method. A simple GET call.\n      // Note the response body is determined from the fetch response. The\n      // fetch call can take a third argument that indicates what type of\n      // response is expected.\n      const dataServerFetchProxy = getDataServerFetchProxy(\n        extensionSDK,\n        location.state\n      )\n      const response = await dataServerFetchProxy.fetchProxy(\n        `${POSTS_SERVER_URL}/posts`\n      )\n      if (handleResponse(response, dataDispatch, undefined, firstTime)) {\n        updatePosts(dataDispatch, response.body.reverse())\n      }\n    } catch (error) {\n      handleError(error, dispatchEvent, firstTime)\n    }\n  }\n\n  // Handle title change for a new post\n  const onTitleChange = (e: any) => {\n    updateTitle(dataDispatch, e.currentTarget.value)\n  }\n\n  // Post column definitions for action list\n  const postsColumns: DataTableColumns = [\n    {\n      id: 'id',\n      title: 'ID',\n      type: 'number',\n      size: 10,\n    },\n    {\n      id: 'title',\n      title: 'Title',\n      type: 'string',\n      size: 60,\n    },\n    {\n      id: 'author',\n      title: 'Author',\n      type: 'string',\n      size: 30,\n    },\n  ]\n\n  // render posts action list columns\n  const postsItems = posts.map((post: any) => {\n    // Action column, posts may be deleted\n    const actions = (\n      <>\n        <DataTableAction onClick={onPostDelete.bind(null, post)}>\n          Delete\n        </DataTableAction>\n      </>\n    )\n\n    // The columns\n    const { id, title, author } = post\n    return (\n      <DataTableItem key={id} id={id} actions={actions}>\n        <DataTableCell>{id}</DataTableCell>\n        <DataTableCell>{title}</DataTableCell>\n        <DataTableCell>{author}</DataTableCell>\n      </DataTableItem>\n    )\n  })\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n        mb=\"medium\"\n        alignItems=\"baseline\"\n      >\n        <Text>Posts data is being served from {POSTS_SERVER_URL}</Text>\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"baseline\">\n          <Button ml=\"small\" onClick={() => fetchPosts()}>\n            Refresh data\n          </Button>\n        </Box>\n      </Box>\n      <Box\n        mb=\"medium\"\n        px=\"xlarge\"\n        pt=\"small\"\n        border=\"1px solid\"\n        borderColor=\"palette.charcoal200\"\n        borderRadius=\"4px\"\n      >\n        <Form onSubmit={onCreatePostSubmit}>\n          <FieldText\n            label=\"Title\"\n            name=\"title\"\n            value={title}\n            onChange={onTitleChange}\n            required\n          />\n          <Button disabled={title.length === 0}>Create Post</Button>\n        </Form>\n      </Box>\n      <DataTable columns={postsColumns} caption=\"Posts\">\n        {postsItems}\n      </DataTable>\n    </>\n  )\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useContext, useEffect } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport {\n  DataTable,\n  DataTableColumns,\n  DataTableItem,\n  DataTableCell,\n} from '@looker/components'\nimport { Looker40SDK } from '@looker/sdk'\nimport {\n  ExtensionContext2,\n  ExtensionContextData2,\n} from '@looker/extension-sdk-react'\nimport { updateErrorMessage, updateSheetData } from '../../data/DataReducer'\nimport { GOOGLE_CLIENT_ID, AuthOption, POSTS_SERVER_URL } from '../..'\nimport { handleResponse, handleError } from '../../utils/validate_data_response'\nimport { getDataServerFetchProxy } from '../../utils/fetch_proxy'\n\nimport { GoogleSheetsDemoProps } from './types'\n\n/**\n * Demonstrate usage of the google sheets API via the extension sdk fetch proxy\n */\nexport const GoogleSheetsDemo: React.FC<GoogleSheetsDemoProps> = ({\n  dataDispatch,\n  dataState,\n}) => {\n  // Get access to the extension SDK and the looker API SDK.\n  const extensionContext = useContext<ExtensionContextData2<Looker40SDK>>(\n    ExtensionContext2\n  )\n  const { extensionSDK } = extensionContext\n\n  // React router setup\n  const location = useLocation()\n\n  useEffect(() => {\n    // Create a function so that async/await can be used in useEffect\n    const fetchData = async () => {\n      // Make sure the google client id has been defined\n      if (GOOGLE_CLIENT_ID === '') {\n        updateErrorMessage(\n          dataDispatch,\n          'Google client id has not been defined. Please see README.md for instructions.'\n        )\n      } else {\n        const { googleAccessToken, authOption } = location.state as any\n        const spreadsheetId = '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms'\n        const range = 'Class Data!A2:E'\n        try {\n          if (authOption === AuthOption.Google) {\n            // The sheets API can be accessed directly when google is the OAUTH provider.\n            if (!googleAccessToken) {\n              // This should not happen\n              updateErrorMessage(dataDispatch, 'Google access token is missing')\n            } else {\n              // Read the spread sheet. Note that the spreadsheet id comes from the Google Sheets\n              // Browser quick start demo\n              // https://developers.google.com/sheets/api/quickstart/js\n              const response = await extensionSDK.fetchProxy(\n                `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${range}?access_token=${googleAccessToken}`\n              )\n              if (handleResponse(response, dataDispatch)) {\n                const values: any[] = response.body?.values || []\n                updateSheetData(dataDispatch, values)\n              }\n            }\n          } else {\n            // If use is not logged in using google OAUTH the sheet is read using a\n            // proxy call to the data server. The data server will check to see if the\n            // user is authorized to make the call by checking the JWT token.\n            const dataServerFetchProxy = getDataServerFetchProxy(\n              extensionSDK,\n              location.state\n            )\n            const response = await dataServerFetchProxy.fetchProxy(\n              `${POSTS_SERVER_URL}/sheets/${spreadsheetId}/${range}`\n            )\n            if (handleResponse(response, dataDispatch)) {\n              const values: any[] = response.body?.values || []\n              updateSheetData(dataDispatch, values)\n            }\n          }\n        } catch (error) {\n          handleError(error, dispatchEvent)\n        }\n      }\n    }\n    // useEffect does not support async/await directly. Fake it with\n    // a function\n    fetchData()\n  }, [])\n\n  const { sheetData } = dataState\n\n  // Sheet column definitions for action list\n  const sheetColumns: DataTableColumns = [\n    {\n      id: 'name',\n      title: 'Name',\n      type: 'string',\n      size: 'medium',\n    },\n    {\n      id: 'sex',\n      title: 'Sex',\n      type: 'string',\n      size: 'medium',\n    },\n    {\n      id: 'collegeYear',\n      title: 'Year',\n      type: 'string',\n      size: 'medium',\n    },\n    {\n      id: 'state',\n      title: 'State',\n      type: 'string',\n      size: 'medium',\n    },\n    {\n      id: 'major',\n      title: 'Major',\n      type: 'string',\n      size: 'medium',\n    },\n  ]\n\n  // render posts action list columns\n  const sheetItems = (sheetData || []).map((sheetRow: any[]) => {\n    // The column data\n    const [name, sex, collegeYear, state, major] = sheetRow\n    return (\n      <DataTableItem key={name} id={name}>\n        <DataTableCell>{name}</DataTableCell>\n        <DataTableCell>{sex}</DataTableCell>\n        <DataTableCell>{collegeYear}</DataTableCell>\n        <DataTableCell>{state}</DataTableCell>\n        <DataTableCell>{major}</DataTableCell>\n      </DataTableItem>\n    )\n  })\n\n  return (\n    <>\n      {sheetData && (\n        <DataTable columns={sheetColumns} caption=\"Sheet items\">\n          {sheetItems}\n        </DataTable>\n      )}\n    </>\n  )\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useEffect, useReducer } from 'react'\nimport { useHistory, useLocation, useRouteMatch } from 'react-router-dom'\nimport {\n  MessageBar,\n  Box,\n  Divider,\n  Heading,\n  TabList,\n  Tab,\n  TabPanels,\n  TabPanel,\n} from '@looker/components'\nimport { SandboxStatus } from '../SandboxStatus'\nimport { ExternalApiFunctionsProps } from './types'\nimport { Auth } from './components/Auth'\nimport { DataServerDemo } from './components/DataServerDemo'\nimport { GoogleSheetsDemo } from './components/GoogleSheetsDemo'\nimport {\n  initialState as dataInitialState,\n  reducer as dataReducer,\n  updateErrorMessage,\n} from './data/DataReducer'\n\n/**\n * External API demonstration. Demonstrates the following:\n * 1. The external API fetch proxy accessing a simple json data server.\n * 2. Oauth2 authorization with Google (implicit OAUTH2 flow). Note that other\n *    Oauth2 providers that support the implicit OAUTH2 flow can be used.\n * 3. Google sheets demo.\n */\nconst ExternalApiFunctions: React.FC<ExternalApiFunctionsProps> = () => {\n  // State is stored here as asynchronous actions may complete\n  // after components unload. If components own state, react puts messages\n  // on the console.\n  const [dataState, dataDispatch] = useReducer(dataReducer, dataInitialState)\n\n  // React router setup\n  const history = useHistory()\n  const location = useLocation()\n  const match = useRouteMatch<{ func: string; tab: string }>('/:func/:tab')\n\n  // Onetime initial setup for the component\n  useEffect(() => {\n    const tabIndex = parseInt(match?.params?.tab || '-1')\n    // If tab index not in the URL, add it.\n    if (tabIndex < 0 || tabIndex > 1) {\n      history.push(`${location.pathname}/0`, location.state)\n    }\n  }, [])\n\n  // Tab handling. Current tab is stored in URL so that it can be restored on\n  // page reload.\n  let selectedIndex = match ? Number(match.params.tab) : 0\n  selectedIndex = isNaN(selectedIndex) ? -1 : selectedIndex\n  const onSelectTab = (index: number) => {\n    const tabIndex = parseInt(match?.params?.tab || '-1')\n    if (tabIndex !== index) {\n      history.push(`/${match?.params?.func}/${index}`, location.state)\n    }\n  }\n\n  // Close the error message banner\n  const onDismiss = () => {\n    updateErrorMessage(dataDispatch, undefined)\n  }\n\n  // Get data from state. The user needs to be authorized to see the demos\n  const { errorMessage } = dataState\n  const { jwtToken } = (location.state as any) || {}\n\n  return (\n    <>\n      <Heading mt=\"xlarge\">External API Functions</Heading>\n      <SandboxStatus />\n      {errorMessage && (\n        <MessageBar intent=\"critical\" onPrimaryClick={onDismiss}>\n          {errorMessage}\n        </MessageBar>\n      )}\n      <Box padding=\"small\">\n        <Divider />\n        <Auth dataDispatch={dataDispatch} dataState={dataState} />\n        <Divider />\n        {jwtToken && (\n          <>\n            <TabList selectedIndex={selectedIndex} onSelectTab={onSelectTab}>\n              <Tab>Data Server Demo</Tab>\n              <Tab>Google Sheets Demo</Tab>\n            </TabList>\n            <TabPanels selectedIndex={selectedIndex}>\n              <TabPanel>\n                <DataServerDemo\n                  dataDispatch={dataDispatch}\n                  dataState={dataState}\n                />\n              </TabPanel>\n              <TabPanel>\n                <GoogleSheetsDemo\n                  dataDispatch={dataDispatch}\n                  dataState={dataState}\n                />\n              </TabPanel>\n            </TabPanels>\n          </>\n        )}\n      </Box>\n    </>\n  )\n}\n\nexport default ExternalApiFunctions\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useContext, useEffect, useState } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { intersects } from 'semver'\nimport {\n  Box,\n  Button,\n  ButtonOutline,\n  Dialog,\n  Heading,\n  DialogContent,\n  SpaceVertical,\n  Text,\n} from '@looker/components'\nimport { Looker40SDK } from '@looker/sdk'\nimport {\n  ExtensionContext2,\n  ExtensionContextData2,\n} from '@looker/extension-sdk-react'\nimport {\n  AuthOption,\n  POSTS_SERVER_URL,\n  GOOGLE_CLIENT_ID,\n  GOOGLE_SCOPES,\n  GITHUB_CLIENT_ID,\n  AUTH0_CLIENT_ID,\n  AUTH0_SCOPES,\n  AUTH0_BASE_URL,\n} from '../..'\nimport {\n  initializeState,\n  updateErrorMessage,\n  updateName,\n} from '../../data/DataReducer'\nimport { extractMessageFromError } from '../../../../utils/extract_message_from_error'\nimport { getDataServerFetchProxy } from '../../utils/fetch_proxy'\nimport { AuthProps } from './types'\n\n/**\n * Authorization component. Monitors whether a user is signed in or not.\n * Provides options for a user to sign in.\n * User can sign in without any authentication.\n * User can sign in using Google OAUTH2\n */\nexport const Auth: React.FC<AuthProps> = ({ dataState, dataDispatch }) => {\n  // Get access to the extension SDK and the looker API SDK.\n  const { extensionSDK, coreSDK } = useContext<\n    ExtensionContextData2<Looker40SDK>\n  >(ExtensionContext2)\n\n  // Dialog state\n  const [dialogOpen, setDialogOpen] = useState(false)\n\n  // React router setup\n  const history = useHistory()\n  const location = useLocation<any>()\n\n  // Component data state\n  const { name } = dataState\n\n  // First time setup\n  useEffect(() => {\n    const initialize = async () => {\n      if (\n        GOOGLE_CLIENT_ID === '' ||\n        GITHUB_CLIENT_ID === '' ||\n        AUTH0_CLIENT_ID === ''\n      ) {\n        updateErrorMessage(\n          dataDispatch,\n          'Google, Github or Auth0 client id has not been defined. Please see README.md for instructions.'\n        )\n        return\n      }\n      const { authOption, accessToken, jwtToken } = location.state || {}\n      if (jwtToken) {\n        // Got jwt token, check its still valid\n        const isAuthorized = await dataServerAuthCheck()\n        if (isAuthorized) {\n          // Still valid, repopulate user information\n          switch (authOption) {\n            case AuthOption.Google:\n              getGoogleUserInfo(accessToken)\n              break\n            case AuthOption.Github:\n              getGithubUserInfo(accessToken)\n              break\n            case AuthOption.Auth0:\n              getAuth0UserInfo(accessToken)\n              break\n            default:\n              getLookerUserInfo()\n          }\n        } else {\n          // Not authorized, clear out push state\n          history.replace(location.pathname, {})\n        }\n      }\n    }\n    initialize()\n  }, [])\n\n  // Check to see if the users jwt token is still valid\n  const dataServerAuthCheck = async (): Promise<boolean> => {\n    try {\n      const dataServerFetchProxy = getDataServerFetchProxy(\n        extensionSDK,\n        location.state\n      )\n      const response = await dataServerFetchProxy.fetchProxy(\n        `${POSTS_SERVER_URL}/auth`\n      )\n      return response.ok\n    } catch (error) {\n      console.error(error)\n      return false\n    }\n  }\n\n  // Log the user into to data server using Looker as a proxy. This creates a JWT token\n  // that is stored in push state\n  // The jwt token is only created if the custom secret resolved by the Looker server\n  // matches the secret held by the data server. Essentially, this is a secure exchange\n  // of a code (the secret) for an access token (the JWT token).\n  const dataServerAuth = async (body: any): Promise<string | undefined> => {\n    try {\n      // The custom secret will be resolved by the Looker server.\n      body.client_secret = extensionSDK.createSecretKeyTag('custom_secret_key')\n      const response = await extensionSDK.serverProxy(\n        `${POSTS_SERVER_URL}/auth`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Accept: 'application/json',\n          },\n          body: JSON.stringify(body),\n        }\n      )\n      if (response.ok && response.body && response.body.jwt_token) {\n        return response.body.jwt_token\n      }\n    } catch (error) {\n      console.error(error)\n    }\n    return undefined\n  }\n\n  // Log out of the data server\n  const dataServerAuthOut = async (): Promise<void> => {\n    try {\n      const dataServerFetchProxy = getDataServerFetchProxy(\n        extensionSDK,\n        location.state\n      )\n      dataServerFetchProxy.fetchProxy(`${POSTS_SERVER_URL}/authout`)\n    } catch (error) {\n      console.error(error)\n    }\n    updateName(dataDispatch, '')\n  }\n\n  // Toggle to change authorization. If logged in, the user is logged out.\n  // If not logged in, the authorize choice dialog is displayed.\n  const changeAuthorization = async () => {\n    const { jwtToken } = location.state || {}\n    updateErrorMessage(dataDispatch, undefined)\n    if (jwtToken) {\n      initializeState(dataDispatch)\n      await dataServerAuthOut()\n      history.replace(location.pathname, {})\n    } else {\n      setDialogOpen(true)\n    }\n  }\n\n  // Google login\n  const googleSignin = async () => {\n    try {\n      const response = await extensionSDK.oauth2Authenticate(\n        'https://accounts.google.com/o/oauth2/v2/auth',\n        {\n          client_id: GOOGLE_CLIENT_ID!,\n          scope: GOOGLE_SCOPES,\n          response_type: 'token',\n        }\n      )\n      const { access_token, expires_in } = response\n      // Get information about the just logged in user\n      const { id, name } = await getGoogleUserInfo(access_token)\n      const jwtToken = await signinDataServer(\n        AuthOption.Google,\n        id,\n        name,\n        access_token,\n        expires_in\n      )\n      updateLocationPushState(\n        AuthOption.Google,\n        jwtToken,\n        access_token,\n        access_token\n      )\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      if (\n        errorMessage.startsWith(\n          'Extension not entitled to access external oauth2 API url'\n        )\n      ) {\n        updateErrorMessage(\n          dataDispatch,\n          \"Please add 'https://accounts.google.com/o/oauth2/v2/auth' to the extensions oauth2_urls entitlements\"\n        )\n      } else {\n        updateErrorMessage(dataDispatch, 'Login failed')\n        console.error('failed to login', error)\n      }\n    }\n  }\n\n  // Get information about user from Google\n  const getGoogleUserInfo = async (accessToken?: string) => {\n    let name = 'Unknown'\n    let id = 'Unknown'\n    try {\n      // Get information about user from google\n      const userInfoResponse = await extensionSDK.fetchProxy(\n        `https://www.googleapis.com/oauth2/v2/userinfo`,\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }\n      )\n      if (userInfoResponse.ok) {\n        name = userInfoResponse.body?.name || 'Unknown'\n        id = userInfoResponse.body?.id || 'Unknown'\n      }\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      updateErrorMessage(dataDispatch, errorMessage)\n      console.error(error)\n    }\n    updateName(dataDispatch, name)\n    return { id, name }\n  }\n\n  // Github login\n  const githubSignin = async () => {\n    const authenticateParameters: Record<string, string> = {\n      client_id: GITHUB_CLIENT_ID!,\n      response_type: 'code',\n    }\n    try {\n      const response = await extensionSDK.oauth2Authenticate(\n        'https://github.com/login/oauth/authorize',\n        authenticateParameters,\n        'GET'\n      )\n      // Note the client secret is securely stored in the Looker server.\n      // Do NOT expose the client secret in the extension code.\n      // Note github does not support code challenge.\n      const exchangeParameters: Record<string, string> = {\n        client_id: GITHUB_CLIENT_ID!,\n        code: response.code,\n        client_secret: extensionSDK.createSecretKeyTag('github_secret_key'),\n      }\n      const codeExchangeResponse = await extensionSDK.oauth2ExchangeCodeForToken(\n        'https://github.com/login/oauth/access_token',\n        exchangeParameters\n      )\n      const { access_token, error_description } = codeExchangeResponse\n      if (!access_token) {\n        updateErrorMessage(\n          dataDispatch,\n          error_description || 'Authentication failed'\n        )\n      } else {\n        const { id, name } = await getGithubUserInfo(access_token)\n        if (!id) {\n          updateErrorMessage(\n            dataDispatch,\n            'Failed to retrieve information about user'\n          )\n        } else {\n          const jwtToken = await signinDataServer(\n            AuthOption.Github,\n            id,\n            name,\n            access_token\n          )\n          updateLocationPushState(AuthOption.Github, jwtToken, access_token)\n        }\n      }\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      if (\n        errorMessage.startsWith(\n          'Extension not entitled to access external oauth2 API url'\n        )\n      ) {\n        updateErrorMessage(\n          dataDispatch,\n          \"Please add 'https://github.com/login/oauth/authorize' and 'https://github.com/login/oauth/access_token' to the extensions oauth2_urls entitlements\"\n        )\n      } else {\n        updateErrorMessage(dataDispatch, 'Login failed')\n        console.error('failed to login', error)\n      }\n    }\n  }\n\n  // Get information about the use from Github\n  const getGithubUserInfo = async (accessToken?: string) => {\n    let name\n    let id\n    try {\n      const userInfoResponse = await extensionSDK.fetchProxy(\n        'https://api.github.com/user',\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }\n      )\n      if (userInfoResponse.ok) {\n        name = userInfoResponse.body?.name || 'Unknown'\n        id = userInfoResponse.body?.id || 'Unknown'\n      }\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      updateErrorMessage(dataDispatch, errorMessage)\n      console.error(error)\n    }\n    updateName(dataDispatch, name)\n    return { id, name }\n  }\n\n  // Sigin in using Auth0\n  const auth0Signin = async (useCodeChallenge: boolean) => {\n    try {\n      const authRequest: Record<string, string> = {\n        client_id: AUTH0_CLIENT_ID!,\n        response_type: 'code',\n        scope: AUTH0_SCOPES,\n      }\n      if (useCodeChallenge) {\n        // Alternate method to secret key. The looker host will generate\n        // a code challenge and a code verifier. The code challenge is an\n        // hashed version of the code verifier. The challenge is sent with\n        // the code request, the verifier is sent with the token request.\n        // The oauth2 server then hashes the verifier and compares to the\n        // code challenge. If they match a token will be returned.\n        authRequest.code_challenge_method = 'S256'\n      }\n      const response = await extensionSDK.oauth2Authenticate(\n        `${AUTH0_BASE_URL}/authorize`,\n        authRequest,\n        'GET'\n      )\n      const exchangeRequest: Record<string, string> = {\n        grant_type: 'authorization_code',\n        client_id: AUTH0_CLIENT_ID!,\n        code: response.code,\n      }\n      if (!useCodeChallenge) {\n        // Note the client secret is securely stored in the Looker server.\n        // Do NOT expose the client secret in the extension code.\n        exchangeRequest.client_secret = extensionSDK.createSecretKeyTag(\n          'auth0_secret_key'\n        )\n      }\n\n      const codeExchangeResponse = await extensionSDK.oauth2ExchangeCodeForToken(\n        `${AUTH0_BASE_URL}/login/oauth/token`,\n        exchangeRequest\n      )\n      const { access_token, expires_in } = codeExchangeResponse\n      const { id, name } = await getAuth0UserInfo(access_token)\n      const jwtToken = await signinDataServer(\n        AuthOption.Auth0,\n        id,\n        name,\n        access_token,\n        expires_in\n      )\n      updateLocationPushState(AuthOption.Auth0, jwtToken, access_token)\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      if (\n        errorMessage.startsWith(\n          'Extension not entitled to access external oauth2 API url'\n        )\n      ) {\n        updateErrorMessage(\n          dataDispatch,\n          `Please add '${AUTH0_BASE_URL}/authorize' and '${AUTH0_BASE_URL}/login/oauth/token' to the extensions oauth2_urls entitlements`\n        )\n      } else {\n        updateErrorMessage(dataDispatch, 'Login failed')\n        console.error('failed to login', error)\n      }\n    }\n  }\n\n  // Get information about the user from Auth0\n  const getAuth0UserInfo = async (accessToken?: string) => {\n    let name = 'Unknown'\n    let id = 'Unknown'\n    try {\n      const userInfoResponse = await extensionSDK.fetchProxy(\n        `${AUTH0_BASE_URL}/userinfo`,\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        }\n      )\n      if (userInfoResponse.ok) {\n        name = userInfoResponse.body?.name || 'Unknown'\n        id = userInfoResponse.body?.sub || 'Unknown'\n      }\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      updateErrorMessage(dataDispatch, errorMessage)\n      console.error(error)\n    }\n    updateName(dataDispatch, name)\n    return { id, name }\n  }\n\n  // Custom login.\n  const customSignin = async () => {\n    const { id, name } = await getLookerUserInfo()\n    try {\n      const jwtToken = await signinDataServer(AuthOption.Custom, id, name)\n      updateLocationPushState(AuthOption.Custom, jwtToken)\n    } catch (error) {\n      updateErrorMessage(dataDispatch, 'Login failed')\n      console.error('failed to login', error)\n    }\n  }\n\n  // Get information about the user from Looker\n  const getLookerUserInfo = async () => {\n    let name = 'Unknown'\n    let id: string | number = 'Unknown'\n    try {\n      // Get information about user from Looker\n      const value = await coreSDK.ok(coreSDK.me())\n      name = value.display_name || 'Unknown'\n      id = value.id || 'Unknown'\n    } catch (error) {\n      const errorMessage = extractMessageFromError(error)\n      updateErrorMessage(dataDispatch, errorMessage)\n      console.error(error)\n    }\n    updateName(dataDispatch, name)\n    return { id, name }\n  }\n\n  // Sign the user into the Looker server. It returns a JWT tokem\n  // that reflects the session. The example shown here is very simple\n  // and should not be used in a production implementation.\n  const signinDataServer = async (\n    chosenAuthOption: AuthOption,\n    id: string | number,\n    name: string,\n    accessToken?: string,\n    expiresIn?: string\n  ) => {\n    // Log into the data server. Pass in the id. The data server\n    // can use the id to verify if the user is authorized to use the data server\n    // (it doesn't but it could).\n    const jwtToken = await dataServerAuth({\n      type: chosenAuthOption,\n      access_token: accessToken,\n      expires_in: expiresIn,\n      name,\n      id,\n    })\n    if (!jwtToken) {\n      updateErrorMessage(dataDispatch, 'Login failed')\n    }\n    return jwtToken\n  }\n\n  // Session state is stored in push state so it can survive a page\n  // reload. It will be lost if the user navigates away from this view.\n  const updateLocationPushState = (\n    chosenAuthOption: AuthOption,\n    jwtToken?: string,\n    accessToken?: string,\n    googleAccessToken?: string\n  ) => {\n    // Save access token data in push state.\n    // 1. access_token is the token from the authorization (anonymous does not have one)\n    // 2. jwt token is the jwt token generated by the server. It is used instead of a cookie\n    // 3. googleAccessToken is a token used for accessing the google sheets demo.\n    //    a. For the google login it is the same as the access token.\n    //    b. For the auth0 login it is requested from auth0 via the data server. Note\n    //       Auth0 recommends against this. This is only done for demonstration purposes\n    //       and hoops need to be jumped to do it.\n    if (jwtToken) {\n      history.replace(location.pathname, {\n        ...location.state,\n        authOption: chosenAuthOption,\n        accessToken,\n        jwtToken,\n        googleAccessToken,\n      })\n    } else {\n      history.replace(location.pathname, {})\n    }\n  }\n\n  // Sign in using the authorization option of choice. choices are:\n  // 1. anonymous - just logs into the data server. there is no validation. a session is created.\n  // 2. google - uses oauth2\\\n  // 3. Github - uses oauth2\n  // 3. Auth0 - uses oauth2\n  const signin = (chosenAuthOption: AuthOption) => {\n    setDialogOpen(false)\n    switch (chosenAuthOption) {\n      case AuthOption.Google:\n        googleSignin()\n        break\n      case AuthOption.Github:\n        githubSignin()\n        break\n      case AuthOption.Auth0:\n        auth0Signin(false)\n        break\n      case AuthOption.Auth0Alt:\n        auth0Signin(true)\n        break\n      default:\n        customSignin()\n    }\n  }\n\n  // Close the dialog\n  const closeDialog = () => {\n    setDialogOpen(false)\n  }\n\n  // Create message describing what kind of authorization is in use\n  let authMessage = ''\n  const { jwtToken, authOption } = location.state || {}\n  if (jwtToken) {\n    switch (authOption) {\n      case AuthOption.Google:\n        authMessage = `${name}, you are authorized using Google`\n        break\n      case AuthOption.Github:\n        authMessage = `${name}, you are authorized using Github`\n        break\n      case AuthOption.Auth0:\n        authMessage = `${name}, you are authorized using Auth0`\n        break\n      default:\n        authMessage = `${name}, you are authorized`\n    }\n  } else {\n    authMessage = 'You are not authorized!'\n  }\n\n  const oauthCodeChallengeSupported = intersects(\n    '>=7.17.0',\n    extensionSDK.lookerHostData?.lookerVersion || '7.0.0',\n    true\n  )\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"row\"\n      width=\"100%\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n    >\n      <Text>{authMessage}</Text>\n      <Button onClick={changeAuthorization}>\n        {jwtToken ? 'Sign out' : 'Sign in'}\n      </Button>\n      <Dialog isOpen={dialogOpen} onClose={closeDialog} width=\"50vw\">\n        <DialogContent>\n          <Heading>Choose an authentication method</Heading>\n          <SpaceVertical mt=\"xlarge\" mb=\"large\">\n            <ButtonOutline\n              width=\"100%\"\n              onClick={signin.bind(null, AuthOption.Google)}\n              disabled={GOOGLE_CLIENT_ID === ''}\n            >\n              Sign with Google (OAUTH implicit flow)\n            </ButtonOutline>\n            <ButtonOutline\n              width=\"100%\"\n              onClick={signin.bind(null, AuthOption.Github)}\n              disabled={GITHUB_CLIENT_ID === ''}\n            >\n              Sign with Github (OAUTH code flow with secret key)\n            </ButtonOutline>\n            <ButtonOutline\n              width=\"100%\"\n              onClick={signin.bind(null, AuthOption.Auth0)}\n              disabled={AUTH0_CLIENT_ID === ''}\n            >\n              Sign with Auth0 (OAUTH code flow with secret key)\n            </ButtonOutline>\n            <ButtonOutline\n              width=\"100%\"\n              onClick={signin.bind(null, AuthOption.Auth0Alt)}\n              disabled={AUTH0_CLIENT_ID === '' || !oauthCodeChallengeSupported}\n            >\n              Sign with Auth0 (OAUTH PKCE flow with code challenge)\n            </ButtonOutline>\n            <ButtonOutline\n              width=\"100%\"\n              onClick={signin.bind(null, AuthOption.Custom)}\n            >\n              Sign in (with custom secret key)\n            </ButtonOutline>\n          </SpaceVertical>\n        </DialogContent>\n      </Dialog>\n    </Box>\n  )\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport { Dispatch } from 'react'\n\n/**\n * Centralized data for extanal API demos. Use react useReducer hooks.\n */\n\n// Initial stats\nexport const initialState: DataState = {\n  posts: [],\n  name: '',\n  title: '',\n  errorMessage: undefined,\n}\n\n// The state interface\nexport interface DataState {\n  posts: any[]\n  name: string\n  title: string\n  errorMessage?: string\n  sheetData?: any[]\n}\n\n// Supported actions\nenum Action {\n  initialize,\n  updatePosts,\n  updateName,\n  updateTitle,\n  updateErrorMessage,\n  updateSheetData,\n}\n\n// The reducer\nexport const reducer = (state: DataState, action: any) => {\n  const { type, payload } = action\n  switch (type) {\n    case Action.updatePosts:\n      return {\n        ...state,\n        posts: payload,\n      }\n    case Action.updateName:\n      return {\n        ...state,\n        name: payload,\n      }\n    case Action.updateTitle:\n      return {\n        ...state,\n        title: payload,\n      }\n    case Action.updateErrorMessage:\n      return {\n        ...state,\n        errorMessage: payload,\n      }\n    case Action.updateSheetData:\n      return {\n        ...state,\n        sheetData: payload,\n      }\n    case Action.initialize:\n      return { ...initialState }\n    default:\n      return state\n  }\n}\n\n/**\n * Update posts\n * @param dispatch\n * @param posts\n */\nexport const updatePosts = (dispatch: Dispatch<any>, posts: any[]) =>\n  dispatch({ type: Action.updatePosts, payload: posts })\n\n/**\n * Update name of poster\n * @param dispatch\n * @param name\n */\nexport const updateName = (dispatch: Dispatch<any>, name: string) =>\n  dispatch({ type: Action.updateName, payload: name })\n\n/**\n *\n * @param dispatch Update title of post\n * @param title\n */\nexport const updateTitle = (dispatch: Dispatch<any>, title: string) =>\n  dispatch({ type: Action.updateTitle, payload: title })\n\n/**\n * Update error message\n * @param dispatch\n * @param errorMessage\n */\nexport const updateErrorMessage = (\n  dispatch: Dispatch<any>,\n  errorMessage?: string\n) => dispatch({ type: Action.updateErrorMessage, payload: errorMessage })\n\n/**\n * Update sheet data\n * @param dispatch\n * @param sheetData\n */\nexport const updateSheetData = (dispatch: Dispatch<any>, sheetData: any[]) =>\n  dispatch({ type: Action.updateSheetData, payload: sheetData })\n\n/**\n * Initialize state\n * @param dispatch\n */\nexport const initializeState = (dispatch: Dispatch<any>) =>\n  dispatch({ type: Action.initialize })\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n// Authorization options\nexport enum AuthOption {\n  Custom = 'Custom',\n  Google = 'Google',\n  Github = 'Github',\n  Auth0 = 'Auth0',\n  Auth0Alt = 'Auth0Alt',\n}\n\n// Posts server\n\nexport const POSTS_SERVER_URL = process.env.POSTS_SERVER_URL\n\n// Centralize setup of client ids, keys and scopes\n\n// The Google client id should be defined in the .env file. See README.md\nexport const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nexport const GOOGLE_SCOPES =\n  'https://www.googleapis.com/auth/spreadsheets.readonly https://www.googleapis.com/auth/userinfo.profile'\n\n// The Github client id should be defined in the .env file. See README.md\nexport const GITHUB_CLIENT_ID = process.env.GITHUB_CLIENT_ID\n\n// The Auth0 client id should be defined in the .env file. See README.md\nexport const AUTH0_CLIENT_ID = process.env.AUTH0_CLIENT_ID\n// Authorization scopes required by the API; multiple scopes can be\n// included, separated by spaces.\nexport const AUTH0_SCOPES =\n  'openid profile email https://www.googleapis.com/auth/spreadsheets.readonly'\n// Auth0 will provide a domain to use for OAUTH authentication.\nexport const AUTH0_BASE_URL = process.env.AUTH0_BASE_URL\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport {\n  ExtensionSDK,\n  FetchProxy,\n  FetchCustomParameters,\n} from '@looker/extension-sdk'\n\n/**\n * With the advent of enforcement of the SameSite attribute for cookies, an authorization\n * header is being used instead of cookies.\n * @param extensionSDK\n * @param locationState\n */\nexport const getDataServerFetchProxy = (\n  extensionSDK: ExtensionSDK,\n  locationState?: any\n): FetchProxy => {\n  const init: FetchCustomParameters = {}\n  if (locationState && locationState.jwtToken) {\n    init.headers = {\n      Authorization: `Bearer ${locationState.jwtToken}`,\n    }\n  }\n  return extensionSDK.createFetchProxy(undefined, init)\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useEffect, useState } from 'react'\nimport { Paragraph } from '@looker/components'\nimport { SandboxStatusProps } from './types'\n\nexport const SandboxStatus: React.FC<SandboxStatusProps> = () => {\n  const [sandboxStatus, setSandboxStatus] = useState('')\n\n  useEffect(() => {\n    try {\n      const parentWindow: any = (window as any).parent\n      // Attempt to get data from the parent window. This\n      // will fail in a sandboxed environment and in most\n      // cases we want this to fail.\n      // eslint-disable-next-line no-unused-expressions\n      parentWindow.looker?.version\n      setSandboxStatus('NOT')\n    } catch (err) {\n      setSandboxStatus('')\n    }\n  }, [])\n\n  return (\n    <Paragraph my=\"medium\">\n      This extension is <b>{sandboxStatus}</b> sandboxed.\n    </Paragraph>\n  )\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nexport const extractMessageFromError = (error: any): string => {\n  if (typeof error === 'string') {\n    return error\n  }\n  if (error.message) {\n    return error.message\n  }\n  return `${error}`\n}\n"],"sourceRoot":""}